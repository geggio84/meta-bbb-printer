From b9abbf48baacaf1f31678577246d08011048b2c8 Mon Sep 17 00:00:00 2001
From: Matteo Geromin <geromin.matteo@gmail.com>
Date: Thu, 12 Nov 2015 21:33:59 +0100
Subject: [PATCH 01/38] Initial support for bbb-printer

---
 arch/arm/boot/dts/am335x-bone-common.dtsi  | 339 ++++++++++++++++++++++++++++-
 arch/arm/boot/dts/am335x-boneblack.dts     |  23 +-
 arch/arm/mach-omap2/omap_hwmod_33xx_data.c |   2 +-
 drivers/video/fbdev/da8xx-fb.c             | 118 ++++++++--
 4 files changed, 463 insertions(+), 19 deletions(-)

diff --git a/arch/arm/boot/dts/am335x-bone-common.dtsi b/arch/arm/boot/dts/am335x-bone-common.dtsi
index 825e575..2c781f2 100644
--- a/arch/arm/boot/dts/am335x-bone-common.dtsi
+++ b/arch/arm/boot/dts/am335x-bone-common.dtsi
@@ -51,6 +51,12 @@
 			linux,default-trigger = "mmc1";
 			default-state = "off";
 		};
+
+		led@6 {
+			label = "beaglebone:blue:ledPWR";
+			gpios = <&gpio1 16 GPIO_ACTIVE_HIGH>;
+			default-state = "on";
+		};
 	};
 
 	vmmcsd_fixed: fixedregulator@0 {
@@ -59,11 +65,122 @@
 		regulator-min-microvolt = <3300000>;
 		regulator-max-microvolt = <3300000>;
 	};
+
+	vin: fixedregulator@0 {
+		compatible = "regulator-fixed";
+		regulator-name = "vin";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-boot-on;
+	};
+
+	rotary@0 {
+		compatible = "rotary-encoder";
+		gpios = <&gpio1 28 0>, <&gpio0 31 0>;
+		linux,axis = <0>; /* REL_X */
+		rotary-encoder,relative-axis;
+	};
+
+	pwmleds {
+		compatible = "pwm-leds";
+		extruder {
+			pwms = <&pca9685 2 5000000>;
+			pwm-names = "extruder";
+		};
+		hotbed {
+			pwms = <&pca9685 3 5000000>;
+			pwm-names = "hotbed";
+		};
+
+		fan_0 {
+			pwms = <&pca9685 0 5000000>;
+			pwm-names = "fan_0";
+		};
+		fan_1 {
+			pwms = <&pca9685 1 5000000>;
+			pwm-names = "fan_1";
+		};
+
+		green_0 {
+			pwms = <&pca9685 4 5000000>;
+			pwm-names = "green_0";
+		};
+		red_0 {
+			pwms = <&pca9685 5 5000000>;
+			pwm-names = "red_0";
+		};
+		blue_0 {
+			pwms = <&pca9685 6 5000000>;
+			pwm-names = "blue_0";
+		};
+		green_1 {
+			pwms = <&pca9685 7 5000000>;
+			pwm-names = "green_1";
+		};
+		red_1 {
+			pwms = <&pca9685 8 5000000>;
+			pwm-names = "red_1";
+		};
+		blue_1 {
+			pwms = <&pca9685 9 5000000>;
+			pwm-names = "blue_1";
+		};
+		green_2 {
+			pwms = <&pca9685 10 5000000>;
+			pwm-names = "green_2";
+		};
+		red_2 {
+			pwms = <&pca9685 11 5000000>;
+			pwm-names = "red_2";
+		};
+		blue_2 {
+			pwms = <&pca9685 12 5000000>;
+			pwm-names = "blue_2";
+		};
+		green_3 {
+			pwms = <&pca9685 13 5000000>;
+			pwm-names = "green_3";
+		};
+		red_3 {
+			pwms = <&pca9685 14 5000000>;
+			pwm-names = "red_3";
+		};
+		blue_3 {
+			pwms = <&pca9685 15 5000000>;
+			pwm-names = "blue_3";
+		};
+	};
+
+	backlight {
+		compatible = "pwm-backlight";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pwm_bl_pins>;
+
+		pwms = <&ehrpwm1 0 500000 0>;
+		pwm-names = "LCD4_backlight";
+		brightness-levels = <0 4 8 16 32 64 128 255>;
+		default-brightness-level = <7>;
+		status = "okay";
+	};
+
+	onewire_0@0 {
+		compatible = "w1-gpio";
+		pinctrl-names = "default";
+		pinctrl-0 = <&onewire_0_pins>;
+		gpios = <&gpio0 27 0>;
+	};
+
+	onewire_1@0 {
+		compatible = "w1-gpio";
+		pinctrl-names = "default";
+		pinctrl-0 = <&onewire_1_pins>;
+		gpios = <&gpio3 16 0>;
+	};
 };
 
 &am33xx_pinmux {
 	pinctrl-names = "default";
-	pinctrl-0 = <&clkout2_pin>;
+	pinctrl-0 = <&clkout2_pin &stepper_pins &endstop_pins &frontpanel_button_pin &frontpanel_encoder_pins>;
 
 	user_leds_s0: user_leds_s0 {
 		pinctrl-single,pins = <
@@ -71,6 +188,7 @@
 			0x58 (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* gpmc_a6.gpio1_22 */
 			0x5c (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_a7.gpio1_23 */
 			0x60 (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* gpmc_a8.gpio1_24 */
+			0x40 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_a0.gpio1_16, EXT_GPIO */
 		>;
 	};
 
@@ -188,6 +306,122 @@
 			0x1c (PIN_INPUT_PULLUP | MUX_MODE1) /* gpmc_ad7.mmc1_dat7 */
 		>;
 	};
+
+	stepper_pins: pinmux_stepper_pins {
+		pinctrl-single,pins = <
+			0x034 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad13.gpio1_13, DIR X */
+			0x030 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad12.gpio1_12, STEP X */
+			0x1A8 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* mcasp0_axr1.gpio3_20, DIR Y */
+			0x164 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* ecap0_in_pwm0_out.gpio0_7, STEP Y */
+			0x024 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad9.gpio0_23, DIR Z */
+			0x028 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad10.gpio0_26, STEP Z */
+			0x03C (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad15.gpio1_15, DIR E */
+			0x038 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* gpmc_ad14.gpio1_14, STEP E */
+			0x08C (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_clk.gpio2_1, FLAG */
+		>;
+	};
+
+	endstop_pins: pinmux_endstop_pins {
+		pinctrl-single,pins = <
+			0x090 (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_advn_ale.gpio2_2, END X1 */
+			0x094 (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_oen_ren.gpio2_3, END X2 */
+			0x09C (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_ben0_cle.gpio2_5, END Y1 */
+			0x098 (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_wen.gpio2_4, END Y2 */
+			0x04C (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_a3.gpio1_19, END Z1 */
+		>;
+	};
+
+	frontpanel_button_pin: pinmux_frontpanel_button_pin {
+		pinctrl-single,pins = <
+			0x070 (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_wait0.gpio0_30, ENC_SW */
+		>;
+	};
+
+	frontpanel_encoder_pins: pinmux_frontpanel_encoder_pins {
+		pinctrl-single,pins = <
+			0x078 (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_ben1.gpio1_28, ENC_A */
+			0x074 (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_wpn.gpio0_31, ENC_B */
+		>;
+	};
+
+	i2c1_pins: pinmux_i2c1_pins {
+		pinctrl-single,pins = <
+			0x184 (PIN_INPUT_PULLUP | MUX_MODE3) /* uart1_txd.i2c1_scl, I2C1_SCL */
+			0x180 (PIN_INPUT_PULLUP | MUX_MODE3) /* uart1_rxd.i2c1_sda, I2C1_SDA */
+		>;
+	};
+
+	lcd_pins: pinmux_lcd_pins {
+		pinctrl-single,pins = <
+			0x0a0 (PIN_OUTPUT | MUX_MODE0) /* lcd_data0.lcd_data0, LCD_D0 */
+			0x0a4 (PIN_OUTPUT | MUX_MODE0) /* lcd_data1.lcd_data1, LCD_D1 */
+			0x0a8 (PIN_OUTPUT | MUX_MODE0) /* lcd_data2.lcd_data2, LCD_D2 */
+			0x0ac (PIN_OUTPUT | MUX_MODE0) /* lcd_data3.lcd_data3, LCD_D3 */
+			0x0b0 (PIN_OUTPUT | MUX_MODE0) /* lcd_data4.lcd_data4, LCD_D4 */
+			0x0b4 (PIN_OUTPUT | MUX_MODE0) /* lcd_data5.lcd_data5, LCD_D5 */
+			0x0b8 (PIN_OUTPUT | MUX_MODE0) /* lcd_data6.lcd_data6, LCD_D6 */
+			0x0bc (PIN_OUTPUT | MUX_MODE0) /* lcd_data7.lcd_data7, LCD_D7 */
+			0x0c0 (PIN_OUTPUT | MUX_MODE0) /* lcd_data8.lcd_data8, LCD_D8 */
+			0x0c4 (PIN_OUTPUT | MUX_MODE0) /* lcd_data9.lcd_data9, LCD_D9 */
+			0x0c8 (PIN_OUTPUT | MUX_MODE0) /* lcd_data10.lcd_data10, LCD_D10 */
+			0x0cc (PIN_OUTPUT | MUX_MODE0) /* lcd_data11.lcd_data11, LCD_D11 */
+			0x0d0 (PIN_OUTPUT | MUX_MODE0) /* lcd_data12.lcd_data12, LCD_D12 */
+			0x0d4 (PIN_OUTPUT | MUX_MODE0) /* lcd_data13.lcd_data13, LCD_D13 */
+			0x0d8 (PIN_OUTPUT | MUX_MODE0) /* lcd_data14.lcd_data14, LCD_D14 */
+			0x0dc (PIN_OUTPUT | MUX_MODE0) /* lcd_data15.lcd_data15, LCD_D15 */
+			0x0e0 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* lcd_vsync.lcd_vsync, LCD_VSYNC */
+			0x0e4 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* lcd_hsync.lcd_hsync, LCD_HSYNC */
+			0x0e8 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* lcd_pclk.lcd_pclk, LCD_PCLK */
+			0x0ec (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* lcd_ac_bias_en.lcd_ac_bias_en, LCD_AC_BIAS_EN */
+			0x1a4 (PIN_OUTPUT_PULLUP | MUX_MODE0) /* mcasp0_fsr.gpio3_19, LCD_DISP */
+		>;
+	};
+
+	pwm_bl_pins: pinmux_pwm_bl_pins {
+		pinctrl-single,pins = <
+			0x048 (PIN_OUTPUT_PULLDOWN | MUX_MODE6) /* gpmc_a2.ehrpwm1a, LCD_PWM_BL */
+		>;
+	};
+
+	spi0_pins: pinmux_spi0_pins {
+		pinctrl-single,pins = <
+			0x158 (PIN_OUTPUT_PULLUP | MUX_MODE0) /* spi0_d1.spi0_d1, SPI0_D1 */
+			0x154 (PIN_INPUT_PULLUP | MUX_MODE0) /* spi0_d0.spi0_d0, SPI0_D0 */
+			0x150 (PIN_INPUT_PULLUP | MUX_MODE0) /* spi0_sclk.spi0_sclk, SPI0_CLK */
+			0x15C (PIN_OUTPUT_PULLUP | MUX_MODE0) /* spi0_cs0.spi0_cs0, SPI0_CS0 */
+			0x17C (PIN_OUTPUT_PULLUP | MUX_MODE7) /* uart1_rtsn.gpio0_13, SPI0_CS1 */
+			0x178 (PIN_OUTPUT_PULLUP | MUX_MODE7) /* uart1_ctsn.gpio0_12, SPI0_CS2 */
+			0x044 (PIN_OUTPUT_PULLUP | MUX_MODE7) /* gpmc_a1.gpio1_17, SPI0_CS3 */
+			0x1AC (PIN_OUTPUT_PULLUP | MUX_MODE7) /* mcasp0_ahclkx.gpio3_21, SPI0_CS4 */
+		>;
+	};
+
+	spi1_pins: pinmux_spi1_pins {
+		pinctrl-single,pins = <
+			0x190 (PIN_INPUT_PULLUP | MUX_MODE3) /* mcasp0_aclkx.spi1_sclk */
+			0x194 (PIN_INPUT_PULLUP | MUX_MODE3) /* mcasp0_fsx.spi1_d0 */
+			0x19c (PIN_OUTPUT_PULLUP | MUX_MODE3) /* mcasp0_ahclkr.spi1_cs0 */
+		>;
+	};
+
+	onewire_0_pins: pinmux_onewire_0_pins {
+		pinctrl-single,pins = <
+			0x02C (PIN_INPUT_PULLUP | MUX_MODE7) /* gpmc_ad11.gpio0_27, 1wire_0 */
+		>;
+	};
+
+	onewire_1_pins: pinmux_onewire_1_pins {
+		pinctrl-single,pins = <
+			0x198 (PIN_INPUT_PULLUP | MUX_MODE7)  /* mcasp0_axr0.gpio3_16, 1wire_1 */
+		>;
+	};
+
+	XPT2046_pins: pinmux_XPT2046_pins {
+		pinctrl-single,pins = <
+			0x07c (PIN_INPUT | MUX_MODE7) /* gpmc_csn0.gpio1_29, SPI0_TS_IRQ */
+			0x020 (PIN_OUTPUT_PULLUP | MUX_MODE7) /* gpmc_ad8.gpio0_22, LCD_TS_BUSY */
+		>;
+	};
 };
 
 &uart0 {
@@ -240,6 +474,109 @@
 
 };
 
+&i2c1 {
+	status = "okay";
+	clock-frequency = <200000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&i2c1_pins>;
+
+	pca9685: pca9685@40 {
+		compatible = "nxp,pca9685-pwm";
+		#pwm-cells = <2>;
+		reg = <0x40>;
+		status = "okay";
+	};
+};
+
+&tscadc {
+	status = "okay";
+	adc{
+		ti,adc-channels = <0 1 2 3 4 5 6 7>;
+	};
+};
+
+&spi0 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&spi0_pins>;
+	ti,spi-num-cs = <5>;
+	num-chipselects = <5>;
+	cs-gpios = <0>, <&gpio0 13 0>, <&gpio0 12 0>, <&gpio1 17 0>, <&gpio3 21 0>;
+	dmas = <&edma 16
+			&edma 17
+			&edma 18
+			&edma 19
+			&edma 20
+			&edma 21
+			&edma 22
+			&edma 23
+			&edma 46
+			&edma 47>;
+	dma-names = "tx0", "rx0", "tx1", "rx1", "tx2", "rx2", "tx3", "rx3", "tx4", "rx4";
+	
+	ads7843@0 {
+		compatible = "ti,ads7846";
+		reg = <0>; // CHIPSEL
+		spi-max-frequency = <100000>;
+		mode = <0>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&XPT2046_pins>;
+	
+		interrupt-parent = <&gpio1>;
+		interrupts = <29>;
+		pendown-gpio = <&gpio1 29 0>;
+		ti,pendown-gpio-debounce = <50>;
+	
+		vcc-supply = <&vin>;
+		ti,x-min = <0>;
+		ti,x-max = <4000>;
+		ti,y-min = <0>;
+		ti,y-max = <4000>;
+		ti,x-plate-ohms = <750>;
+		ti,y-plate-ohms = <230>;
+		ti,pressure-min = <1000>;
+		ti,pressure-max = <15000>;
+		ti,settle-delay-usec = <150>;
+		ti,debounce-max = <5>;
+		ti,debounce-tol = <65535>;
+		ti,vref-delay-usecs = <450>;
+	
+		linux,wakeup;
+	};
+	
+	stepper_x@1 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "spidev";
+		spi-max-frequency = <100000>;
+		reg = <1>;
+	};
+	
+	stepper_y@2 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "spidev";
+		spi-max-frequency = <100000>;
+		reg = <2>;
+	};
+	
+	stepper_z@3 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "spidev";
+		spi-max-frequency = <100000>;
+		reg = <3>;
+	};
+	
+	stepper_e@4 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "spidev";
+		spi-max-frequency = <100000>;
+		reg = <4>;
+	};
+};
+
 /include/ "tps65217.dtsi"
 
 &tps {
diff --git a/arch/arm/boot/dts/am335x-boneblack.dts b/arch/arm/boot/dts/am335x-boneblack.dts
index 369f34d..af840d1 100644
--- a/arch/arm/boot/dts/am335x-boneblack.dts
+++ b/arch/arm/boot/dts/am335x-boneblack.dts
@@ -23,6 +23,7 @@
 
 &mmc1 {
 	vmmc-supply = <&vmmcsd_fixed>;
+	status = "okay";
 };
 
 &mmc2 {
@@ -92,6 +93,24 @@
 
 &lcdc {
 	status = "okay";
+	u-boot-config;
+	fb-baseaddr = <0x9FC00000>;
+	fb-size-MB = <4>;
+	display-timings {
+		480x272p57 {
+			clock-frequency = <9000000>;
+			hactive = <480>;
+			vactive = <272>;
+			hfront-porch = <9>;
+			hback-porch = <44>;
+			hsync-len = <5>;
+			vback-porch = <13>;
+			vfront-porch = <4>;
+			vsync-len = <10>;
+			hsync-active = <0>;
+			vsync-active = <0>;
+		};
+	};
 };
 
 &mcasp0	{
@@ -115,7 +134,7 @@
 		pinctrl-names = "default", "off";
 		pinctrl-0 = <&nxp_hdmi_bonelt_pins>;
 		pinctrl-1 = <&nxp_hdmi_bonelt_off_pins>;
-		status = "okay";
+		status = "disabled";
 	};
 
 	clk_mcasp0_fixed: clk_mcasp0_fixed {
@@ -133,7 +152,7 @@
 
 	hdmi_audio: hdmi_audio@0 {
 	       compatible = "linux,hdmi-audio";
-	       status = "okay";
+	       status = "disabled";
 	};
 
 	sound {
diff --git a/arch/arm/mach-omap2/omap_hwmod_33xx_data.c b/arch/arm/mach-omap2/omap_hwmod_33xx_data.c
index b7d9fc6..734d90a 100644
--- a/arch/arm/mach-omap2/omap_hwmod_33xx_data.c
+++ b/arch/arm/mach-omap2/omap_hwmod_33xx_data.c
@@ -273,7 +273,7 @@ static struct omap_hwmod am33xx_lcdc_hwmod = {
 	.name		= "lcdc",
 	.class		= &am33xx_lcdc_hwmod_class,
 	.clkdm_name	= "lcdc_clkdm",
-	.flags		= HWMOD_SWSUP_SIDLE | HWMOD_SWSUP_MSTANDBY,
+	.flags		= HWMOD_INIT_NO_IDLE | HWMOD_NO_IDLE | HWMOD_SWSUP_SIDLE | HWMOD_SWSUP_MSTANDBY,
 	.main_clk	= "lcd_gclk",
 	.prcm		= {
 		.omap4	= {
diff --git a/drivers/video/fbdev/da8xx-fb.c b/drivers/video/fbdev/da8xx-fb.c
index 0081725..3b09aa2 100644
--- a/drivers/video/fbdev/da8xx-fb.c
+++ b/drivers/video/fbdev/da8xx-fb.c
@@ -36,6 +36,8 @@
 #include <linux/slab.h>
 #include <linux/delay.h>
 #include <linux/lcm.h>
+#include <linux/of.h>
+#include <video/of_display_timing.h>
 #include <video/da8xx-fb.h>
 #include <asm/div64.h>
 
@@ -139,6 +141,7 @@ static unsigned int lcd_revision;
 static irq_handler_t lcdc_irq_handler;
 static wait_queue_head_t frame_done_wq;
 static int frame_done_flag;
+static bool u_boot_config = false;
 
 static unsigned int lcdc_read(unsigned int addr)
 {
@@ -995,22 +998,22 @@ static int fb_check_var(struct fb_var_screeninfo *var,
 		var->nonstd = 0;
 		break;
 	case 24:
-		var->red.offset = 16;
+		var->red.offset = 0;
 		var->red.length = 8;
 		var->green.offset = 8;
 		var->green.length = 8;
-		var->blue.offset = 0;
+		var->blue.offset = 16;
 		var->blue.length = 8;
 		var->nonstd = 0;
 		break;
 	case 32:
 		var->transp.offset = 24;
 		var->transp.length = 8;
-		var->red.offset = 16;
+		var->red.offset = 0;
 		var->red.length = 8;
 		var->green.offset = 8;
 		var->green.length = 8;
-		var->blue.offset = 0;
+		var->blue.offset = 16;
 		var->blue.length = 8;
 		var->nonstd = 0;
 		break;
@@ -1270,7 +1273,7 @@ static int da8xxfb_set_par(struct fb_info *info)
 	int ret;
 	bool raster = da8xx_fb_is_raster_enabled();
 
-	if (raster)
+	if (!u_boot_config && raster)
 		lcd_disable_raster(DA8XX_FRAME_WAIT);
 
 	fb_var_to_videomode(&par->mode, &info->var);
@@ -1298,7 +1301,7 @@ static int da8xxfb_set_par(struct fb_info *info)
 	lcdc_write(par->dma_start, LCD_DMA_FRM_BUF_BASE_ADDR_1_REG);
 	lcdc_write(par->dma_end, LCD_DMA_FRM_BUF_CEILING_ADDR_1_REG);
 
-	if (raster)
+	if (!u_boot_config && raster)
 		lcd_enable_raster();
 
 	return 0;
@@ -1317,12 +1320,54 @@ static struct fb_ops da8xx_fb_ops = {
 	.fb_blank = cfb_blank,
 };
 
+static struct lcd_ctrl_config *da8xx_fb_create_cfg(struct platform_device *dev)
+{
+	struct lcd_ctrl_config *cfg;
+
+	cfg = devm_kzalloc(&dev->dev, sizeof(struct fb_videomode), GFP_KERNEL);
+	if (!cfg)
+		return NULL;
+
+	/* default values */
+
+	if (lcd_revision == LCD_VERSION_1)
+		cfg->bpp = 16;
+	else
+		cfg->bpp = 32;
+
+	/*
+	 * For panels so far used with this LCDC, below statement is sufficient.
+	 * For new panels, if required, struct lcd_ctrl_cfg fields to be updated
+	 * with additional/modified values. Those values would have to be then
+	 * obtained from dt(requiring new dt bindings).
+	 */
+
+	cfg->panel_shade = COLOR_ACTIVE;
+
+	return cfg;
+}
+
 static struct fb_videomode *da8xx_fb_get_videomode(struct platform_device *dev)
 {
 	struct da8xx_lcdc_platform_data *fb_pdata = dev_get_platdata(&dev->dev);
 	struct fb_videomode *lcdc_info;
+	struct device_node *np = dev->dev.of_node;
 	int i;
 
+	if (np) {
+		lcdc_info = devm_kzalloc(&dev->dev,
+					 sizeof(struct fb_videomode),
+					 GFP_KERNEL);
+		if (!lcdc_info)
+			return NULL;
+
+		if (of_get_fb_videomode(np, lcdc_info, OF_USE_NATIVE_MODE)) {
+			dev_err(&dev->dev, "timings not available in DT\n");
+			return NULL;
+		}
+		return lcdc_info;
+	}
+
 	for (i = 0, lcdc_info = known_lcd_panels;
 		i < ARRAY_SIZE(known_lcd_panels); i++, lcdc_info++) {
 		if (strcmp(fb_pdata->type, lcdc_info->name) == 0)
@@ -1348,14 +1393,23 @@ static int fb_probe(struct platform_device *device)
 	struct fb_info *da8xx_fb_info;
 	struct da8xx_fb_par *par;
 	struct clk *tmp_lcdc_clk;
+	u32 videomemorysize;
+	u32 videomem_offset;
 	int ret;
 	unsigned long ulcm;
 
-	if (fb_pdata == NULL) {
+	if (fb_pdata == NULL && !device->dev.of_node) {
 		dev_err(&device->dev, "Can not get platform data\n");
 		return -ENOENT;
 	}
 
+	if (of_find_property(device->dev.of_node, "u-boot-config", NULL))
+	{
+		u_boot_config = true;
+		of_property_read_u32(device->dev.of_node, "fb-baseaddr", &videomem_offset);
+		of_property_read_u32(device->dev.of_node, "fb-size-MB", &videomemorysize);
+	}
+
 	lcdc_info = da8xx_fb_get_videomode(device);
 	if (lcdc_info == NULL)
 		return -ENODEV;
@@ -1391,7 +1445,10 @@ static int fb_probe(struct platform_device *device)
 		break;
 	}
 
-	lcd_cfg = (struct lcd_ctrl_config *)fb_pdata->controller_data;
+	if (device->dev.of_node)
+		lcd_cfg = da8xx_fb_create_cfg(device);
+	else
+		lcd_cfg = fb_pdata->controller_data;
 
 	if (!lcd_cfg) {
 		ret = -EINVAL;
@@ -1410,7 +1467,7 @@ static int fb_probe(struct platform_device *device)
 	par->dev = &device->dev;
 	par->lcdc_clk = tmp_lcdc_clk;
 	par->lcdc_clk_rate = clk_get_rate(par->lcdc_clk);
-	if (fb_pdata->panel_power_ctrl) {
+	if (fb_pdata && fb_pdata->panel_power_ctrl) {
 		par->panel_power_ctrl = fb_pdata->panel_power_ctrl;
 		par->panel_power_ctrl(1);
 	}
@@ -1418,7 +1475,8 @@ static int fb_probe(struct platform_device *device)
 	fb_videomode_to_var(&da8xx_fb_var, lcdc_info);
 	par->cfg = *lcd_cfg;
 
-	da8xx_fb_lcd_reset();
+	if (!u_boot_config)
+		da8xx_fb_lcd_reset();
 
 	/* allocate frame buffer */
 	par->vram_size = lcdc_info->xres * lcdc_info->yres * lcd_cfg->bpp;
@@ -1426,10 +1484,16 @@ static int fb_probe(struct platform_device *device)
 	par->vram_size = roundup(par->vram_size/8, ulcm);
 	par->vram_size = par->vram_size * LCD_NUM_BUFFERS;
 
-	par->vram_virt = dma_alloc_coherent(NULL,
+	if(u_boot_config) {
+		par->vram_virt = ioremap(videomem_offset,(videomemorysize*1024*1024));
+		par->vram_phys = videomem_offset;
+	} else {
+		par->vram_virt = dma_alloc_coherent(NULL,
 					    par->vram_size,
 					    (resource_size_t *) &par->vram_phys,
 					    GFP_KERNEL | GFP_DMA);
+	}
+
 	if (!par->vram_virt) {
 		dev_err(&device->dev,
 			"GLCD: kmalloc for frame buffer failed\n");
@@ -1457,10 +1521,12 @@ static int fb_probe(struct platform_device *device)
 		goto err_release_fb_mem;
 	}
 
-	par->irq = platform_get_irq(device, 0);
-	if (par->irq < 0) {
-		ret = -ENOENT;
-		goto err_release_pl_mem;
+	if(!u_boot_config) {
+		par->irq = platform_get_irq(device, 0);
+		if (par->irq < 0) {
+			ret = -ENOENT;
+			goto err_release_pl_mem;
+		}
 	}
 
 	da8xx_fb_var.grayscale =
@@ -1509,6 +1575,14 @@ static int fb_probe(struct platform_device *device)
 	}
 #endif
 
+	if(u_boot_config) {
+		par->irq = platform_get_irq(device, 0);
+		if (par->irq < 0) {
+			ret = -ENOENT;
+			goto err_release_pl_mem;
+		}
+	}
+
 	if (lcd_revision == LCD_VERSION_1)
 		lcdc_irq_handler = lcdc_irq_handler_rev01;
 	else {
@@ -1654,11 +1728,25 @@ static int fb_resume(struct device *dev)
 
 static SIMPLE_DEV_PM_OPS(fb_pm_ops, fb_suspend, fb_resume);
 
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id da8xx_fb_of_match[] = {
+	/*
+	 * this driver supports version 1 and version 2 of the
+	 * Texas Instruments lcd controller (lcdc) hardware block
+	 */
+	{.compatible = "ti,da8xx-tilcdc", },
+	{.compatible = "ti,am33xx-tilcdc", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, da8xx_fb_of_match);
+#endif
+
 static struct platform_driver da8xx_fb_driver = {
 	.probe = fb_probe,
 	.remove = fb_remove,
 	.driver = {
 		   .name = DRIVER_NAME,
+		   .of_match_table = of_match_ptr(da8xx_fb_of_match),
 		   .pm	= &fb_pm_ops,
 		   },
 };
-- 
1.9.1

