From 137cdec7ea7d4ecb3df730146cac72309fdce8ee Mon Sep 17 00:00:00 2001
From: Darren Etheridge <detheridge@ti.com>
Date: Fri, 11 Jul 2014 09:15:25 -0500
Subject: [PATCH 39/39] HACK: drm/tilcdc: add vsync callback for use in omaplfb
 for gpu

Add a vsync callback registration API that is identical to what was done
for da8xx-fb.c.

Need to find if there is a better way using the DRM infrastructure from
kernel space.  Either that or change the userspace window manager stuff in
the gpu libraries to make use of the DRM provided syncronization
mechanisms.

Signed-off-by: Darren Etheridge <detheridge@ti.com>
---
 drivers/gpu/drm/tilcdc/tilcdc_crtc.c | 33 +++++++++++++++++++++++++++++++++
 drivers/gpu/drm/tilcdc/tilcdc_drv.h  |  5 +++++
 2 files changed, 38 insertions(+)
 mode change 100644 => 100755 drivers/gpu/drm/tilcdc/tilcdc_crtc.c
 mode change 100644 => 100755 drivers/gpu/drm/tilcdc/tilcdc_drv.h

diff --git a/drivers/gpu/drm/tilcdc/tilcdc_crtc.c b/drivers/gpu/drm/tilcdc/tilcdc_crtc.c
old mode 100644
new mode 100755
index 3a3f4c6..15b7bc9
--- a/drivers/gpu/drm/tilcdc/tilcdc_crtc.c
+++ b/drivers/gpu/drm/tilcdc/tilcdc_crtc.c
@@ -44,6 +44,10 @@ struct tilcdc_crtc {
 	int sync_lost_count;
 	bool frame_intact;
 };
+
+static vsync_callback_t vsync_cb_handler;
+static void *vsync_cb_arg;
+
 #define to_tilcdc_crtc(x) container_of(x, struct tilcdc_crtc, base)
 
 static void unref_worker(struct drm_flip_work *work, void *val)
@@ -634,6 +638,32 @@ out:
 
 #define SYNC_LOST_COUNT_LIMIT 50
 
+int register_vsync_cb(vsync_callback_t handler, void *arg, int idx)
+{
+	if ((vsync_cb_handler == NULL) && (vsync_cb_arg == NULL)) {
+		vsync_cb_arg = arg;
+		vsync_cb_handler = handler;
+	} else {
+		return -EEXIST;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(register_vsync_cb);
+
+int unregister_vsync_cb(vsync_callback_t handler, void *arg, int idx)
+{
+	if ((vsync_cb_handler == handler) && (vsync_cb_arg == arg)) {
+		vsync_cb_handler = NULL;
+		vsync_cb_arg = NULL;
+	} else {
+		return -ENXIO;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(unregister_vsync_cb);
+
 irqreturn_t tilcdc_crtc_irq(struct drm_crtc *crtc)
 {
 	struct tilcdc_crtc *tilcdc_crtc = to_tilcdc_crtc(crtc);
@@ -677,6 +707,9 @@ irqreturn_t tilcdc_crtc_irq(struct drm_crtc *crtc)
 			if (event)
 				drm_send_vblank_event(dev, 0, event);
 
+			if (vsync_cb_handler)
+				vsync_cb_handler(vsync_cb_arg);
+
 			spin_unlock_irqrestore(&dev->event_lock, flags);
 		}
 
diff --git a/drivers/gpu/drm/tilcdc/tilcdc_drv.h b/drivers/gpu/drm/tilcdc/tilcdc_drv.h
old mode 100644
new mode 100755
index 4c4aa4e..ed3f46d
--- a/drivers/gpu/drm/tilcdc/tilcdc_drv.h
+++ b/drivers/gpu/drm/tilcdc/tilcdc_drv.h
@@ -170,4 +170,9 @@ int tilcdc_crtc_mode_valid(struct drm_crtc *crtc, struct drm_display_mode *mode)
 int tilcdc_crtc_max_width(struct drm_crtc *crtc);
 void tilcdc_crtc_dpms(struct drm_crtc *crtc, int mode);
 
+/* used by SGX OMAPLFB drvier */
+typedef void (*vsync_callback_t)(void *arg);
+int register_vsync_cb(vsync_callback_t handler, void *arg, int idx);
+int unregister_vsync_cb(vsync_callback_t handler, void *arg, int idx);
+
 #endif /* __TILCDC_DRV_H__ */
-- 
1.9.1

